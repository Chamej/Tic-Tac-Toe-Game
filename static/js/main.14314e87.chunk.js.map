{"version":3,"sources":["components/Square/Square.js","components/Board/Board.js","components/ScoreBoard/ScoreBoard.js","App.js","reportWebVitals.js","index.js"],"names":["Square","value","onClick","turn","winner","handleClick","squareClass","classNames","square","className","Board","squares","winningSquares","createSquares","values","map","includes","key","ScoreBoard","scoreX","scoreO","winningPositions","App","useState","setTurn","Array","fill","setSquares","setWinningSquares","X","O","score","setScore","reset","endGame","result","setTimeout","newSquares","splice","i","length","a","b","c","from","keys","checkForWinner","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.14314e87.chunk.js","sourcesContent":["import './Square.css';\r\nimport classNames from 'classnames';\r\nimport React from 'react';\r\n\r\nconst Square = ({ value, onClick, turn, winner }) => {\r\n\r\n    const handleClick = () => {\r\n        (turn !== null && value === null) && onClick();\r\n    }\r\n\r\n    let squareClass = classNames({\r\n        square: true,\r\n        [`square--${value}`]: value !== null,\r\n        winner: winner,\r\n    });\r\n\r\n    return (\r\n        <div className={squareClass} onClick={() => handleClick()}>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Square;","import Square from \"../Square/Square\";\r\nimport './Board.css';\r\nimport React from 'react';\r\n\r\nconst Board = ({squares, onClick, turn, winningSquares }) => {\r\n\r\n    const createSquares = values => (\r\n        values.map( value => (\r\n            <Square\r\n                winner={winningSquares.includes(value)}\r\n                turn={turn}\r\n                onClick={() => onClick(value)}\r\n                value={squares[value]}\r\n                key={`square_${value}`}\r\n            />\r\n        ))\r\n    );\r\n\r\n    return (\r\n        <div className=\"board\">\r\n            <div className=\"row\">\r\n               {createSquares([0,1,2])}\r\n            </div>\r\n            <div className=\"row\">\r\n                {createSquares([3,4,5])}\r\n            </div>\r\n            <div className=\"row\">\r\n                {createSquares([6,7,8])}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Board;","import './ScoreBoard.css';\r\nimport React from 'react';\r\n\r\nconst ScoreBoard = ({scoreX, scoreO}) => (\r\n    <div className=\"score-board\">\r\n        <div>{scoreX}</div>\r\n        <div>{scoreO}</div>\r\n    </div>\r\n)\r\n\r\nexport default ScoreBoard;","import { useState } from 'react';\nimport './App.css';\nimport Board from './components/Board/Board';\nimport ScoreBoard from './components/ScoreBoard/ScoreBoard';\nimport React from 'react';\n\nconst winningPositions = [\n  [0, 1, 2],\n  [3, 4, 5],\n  [6, 7, 8],\n  [0, 3, 6],\n  [1, 4, 7],\n  [2, 5, 8],\n  [0, 4, 8],\n  [2, 4, 6],\n];\n\n\nconst App = () => {\n\n  const [turn, setTurn] = useState('X');\n  const [squares, setSquares] = useState(Array(9).fill(null));\n  const [winningSquares, setWinningSquares] = useState([]);\n  const [score, setScore] = useState({\n    X: 0,\n    O: 0,\n  });\n\n  const reset = () => {\n    setTurn('X');\n    setSquares(Array(9).fill(null));\n    setWinningSquares([]);\n  }\n\n  const checkForWinner = newSquares => {\n    for(let i = 0; i < winningPositions.length; i++) {\n      const [a,b,c] = winningPositions[i];\n      if(newSquares[a] && newSquares[a] === newSquares[b] && newSquares[a] === newSquares[c]) {\n        endGame(newSquares[a], winningPositions[i]);\n        // there is a winner\n        return\n      }\n    }\n\n    if(!newSquares.includes(null)) {\n      endGame(null, Array.from(Array(10).keys()));\n      //there is no winner\n      return\n    }\n    setTurn(turn === 'X' ? 'O' : 'X');\n  }\n\n  const handleClick = square => {\n    let newSquares = [...squares];\n    newSquares.splice(square, 1, turn);\n    setSquares(newSquares);\n    checkForWinner(newSquares);\n  }\n\n  const endGame = (result, winningPositions) => {\n    setTurn(null);\n    if(result !== null) {\n      setScore({\n        ...score,\n        [result]: score[result] + 1,\n      })\n    }\n    setWinningSquares(winningPositions);\n    setTimeout(reset, 2000);\n  }\n\n  return (\n    <div className=\"container\">\n      <Board winningSquares={winningSquares} turn={turn} squares={squares} onClick={handleClick}/>\n      <ScoreBoard scoreO={score.O} scoreX={score.X} />\n    </div>\n  );\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}